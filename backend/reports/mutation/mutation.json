{"files":{"src/controllers/products.controller.js":{"language":"javascript","mutants":[{"id":"12","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":44},"start":{"column":43,"line":36}}},{"id":"13","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":13,"line":40},"start":{"column":9,"line":40}}},{"id":"14","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":13,"line":40},"start":{"column":9,"line":40}}},{"id":"15","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":42},"start":{"column":15,"line":40}}},{"id":"5","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":12},"start":{"column":47,"line":12}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":48,"line":31},"start":{"column":37,"line":31}}},{"id":"16","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":48,"line":41},"start":{"column":37,"line":41}}},{"id":"17","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":52},"start":{"column":18,"line":46}}},{"id":"2","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1"],"location":{"end":{"column":2,"line":15},"start":{"column":45,"line":8}}},{"id":"3","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 200\n\u001b[31m404\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1"],"location":{"end":{"column":17,"line":12},"start":{"column":13,"line":12}}},{"id":"4","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 404\n\u001b[31m200\u001b[0m \u001b[32m404\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["0","1"],"location":{"end":{"column":17,"line":12},"start":{"column":13,"line":12}}},{"id":"6","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":2,"line":22},"start":{"column":41,"line":17}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","11"],"location":{"end":{"column":2,"line":34},"start":{"column":43,"line":24}}},{"id":"8","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 200\n\u001b[31m404\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","11"],"location":{"end":{"column":13,"line":30},"start":{"column":9,"line":30}}},{"id":"9","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 404\n\u001b[31m200\u001b[0m \u001b[32m404\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["11"],"coveredBy":["4","11"],"location":{"end":{"column":13,"line":30},"start":{"column":9,"line":30}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected status to have been called with arguments 404\n\u001b[31m200\u001b[0m \u001b[32m404\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11"],"location":{"end":{"column":6,"line":32},"start":{"column":15,"line":30}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2"],"location":{"end":{"column":2,"line":7},"start":{"column":45,"line":3}}}],"source":"const { productsService } = require('../services');\n\nconst getAllProducts = async (_req, res) => {\n    const { message } = await productsService.getAllProducts();\n\n    res.status(200).json(message);\n};\nconst getProductsByID = async (req, res) => {\n        const { id } = req.params;\n        const { type, message } = await productsService.getID(id);\n\n        if (type) return res.status(404).json({ message });\n\n        res.status(200).json(message);\n};\n\nconst postProduct = async (req, res) => {\n    const { name } = req.body;\n    const { message } = await productsService.postProduct(name);\n\n    return res.status(201).json(message);\n};\n\nconst updateProduct = async (req, res) => {\n    const { id } = req.params;\n    const { name } = req.body;\n    console.log(id, name);\n    const { type, message } = await productsService.updateProduct(id, name);\n    \n    if (type) {\n        return res.status(404).json({ message });\n    }\n    return res.status(200).json(message);\n};\n\nconst deleteProduct = async (req, res) => {\n    const { id } = req.params;\n    const { type, message } = await productsService.deleteProduct(id);\n    \n    if (type) {\n        return res.status(404).json({ message });\n    }\n    return res.status(204).json();\n};\n\nmodule.exports = {\n    getAllProducts,\n    getProductsByID,\n    postProduct,\n    updateProduct,\n    deleteProduct,\n};"},"src/controllers/sales.controller.js":{"language":"javascript","mutants":[{"id":"27","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":34},"start":{"column":40,"line":26}}},{"id":"28","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":13,"line":30},"start":{"column":9,"line":30}}},{"id":"29","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":13,"line":30},"start":{"column":9,"line":30}}},{"id":"30","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":32},"start":{"column":15,"line":30}}},{"id":"22","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":12},"start":{"column":47,"line":12}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":54,"line":21},"start":{"column":43,"line":21}}},{"id":"31","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":48,"line":31},"start":{"column":37,"line":31}}},{"id":"32","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":41},"start":{"column":18,"line":36}}},{"id":"18","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7"],"location":{"end":{"column":2,"line":7},"start":{"column":45,"line":3}}},{"id":"19","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5","6"],"location":{"end":{"column":2,"line":15},"start":{"column":42,"line":8}}},{"id":"20","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 200\n\u001b[31m404\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5","6"],"location":{"end":{"column":17,"line":12},"start":{"column":13,"line":12}}},{"id":"21","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 404\n\u001b[31m200\u001b[0m \u001b[32m404\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["6"],"coveredBy":["5","6"],"location":{"end":{"column":17,"line":12},"start":{"column":13,"line":12}}},{"id":"23","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":2,"line":24},"start":{"column":40,"line":17}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 201\n\u001b[31m404\u001b[0m \u001b[32m201\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":13,"line":21},"start":{"column":9,"line":21}}},{"id":"25","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["8"],"location":{"end":{"column":13,"line":21},"start":{"column":9,"line":21}}}],"source":"const { salesService } = require('../services');\n\nconst getAllProducts = async (_req, res) => {\n    const { message } = await salesService.getAllProducts();\n\n    res.status(200).json(message);\n};\nconst getSalesByID = async (req, res) => {\n        const { id } = req.params;\n        const { type, message } = await salesService.getID(id);\n\n        if (type) return res.status(404).json({ message });\n\n        res.status(200).json(message);\n};\n\nconst getNewSale = async (req, res) => {\n    const sale = req.body;\n    const { type, message } = await salesService.getNewSale(sale);\n\n    if (type) return res.status(404).json({ message });\n\n    return res.status(201).json(message);\n};\n\nconst deleteSale = async (req, res) => {\n    const { id } = req.params;\n    const { type, message } = await salesService.deleteSale(id);\n\n    if (type) {\n        return res.status(404).json({ message });\n    }\n    return res.status(204).json();\n};\n\nmodule.exports = {\n    getAllProducts,\n    getSalesByID,\n    getNewSale,\n    deleteSale,\n};"},"src/middlewares/validateFieldProduct.js":{"language":"javascript","mutants":[{"id":"48","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":18},"start":{"column":48,"line":13}}},{"id":"49","mutatorName":"BooleanLiteral","replacement":"id","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":15},"start":{"column":9,"line":15}}},{"id":"50","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":15},"start":{"column":9,"line":15}}},{"id":"51","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":15},"start":{"column":9,"line":15}}},{"id":"38","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":3},"start":{"column":44,"line":3}}},{"id":"39","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":3},"start":{"column":55,"line":3}}},{"id":"45","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":78,"line":7},"start":{"column":15,"line":7}}},{"id":"46","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":76,"line":7},"start":{"column":26,"line":7}}},{"id":"47","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":30,"line":9},"start":{"column":17,"line":9}}},{"id":"52","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":74,"line":15},"start":{"column":42,"line":15}}},{"id":"53","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":15},"start":{"column":53,"line":15}}},{"id":"54","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":25,"line":16},"start":{"column":17,"line":16}}},{"id":"55","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":23},"start":{"column":18,"line":20}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9","10"],"location":{"end":{"column":2,"line":11},"start":{"column":50,"line":1}}},{"id":"35","mutatorName":"BooleanLiteral","replacement":"name","statusReason":"Cannot read properties of undefined (reading 'length')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9","10"],"location":{"end":{"column":14,"line":3},"start":{"column":9,"line":3}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["9","10"],"location":{"end":{"column":14,"line":3},"start":{"column":9,"line":3}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot read properties of undefined (reading 'length')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9","10"],"location":{"end":{"column":14,"line":3},"start":{"column":9,"line":3}}},{"id":"40","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["10"],"location":{"end":{"column":24,"line":5},"start":{"column":9,"line":5}}},{"id":"41","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":24,"line":5},"start":{"column":9,"line":5}}},{"id":"42","mutatorName":"EqualityOperator","replacement":"name.length <= 5","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["10"],"location":{"end":{"column":24,"line":5},"start":{"column":9,"line":5}}},{"id":"43","mutatorName":"EqualityOperator","replacement":"name.length >= 5","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":24,"line":5},"start":{"column":9,"line":5}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":6,"line":8},"start":{"column":26,"line":5}}}],"source":"const validateFieldProduct = (req, res, next) => {\n    const { name } = req.body;\n    if (!name) return res.status(400).json({ message: '\"name\" is required' });\n    \n    if (name.length < 5) { \n        return res.status(422)\n        .json({ message: '\"name\" length must be at least 5 characters long' }); \n    }\n    console.log('passeifield');\n    return next();\n};\n\nconst invalidProductName = (req, res, next) => {\n    const { id } = req.params;\n    if (!id) return res.status(404).json({ message: 'Product not found' });\n    console.log('passei');\n    return next();\n};\n\nmodule.exports = {\n    validateFieldProduct,\n    invalidProductName,\n};"},"src/models/products.model.js":{"language":"javascript","mutants":[{"id":"125","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":36},"start":{"column":34,"line":31}}},{"id":"116","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":4},"start":{"column":49,"line":4}}},{"id":"118","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":55,"line":10},"start":{"column":5,"line":10}}},{"id":"119","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":9,"line":11},"start":{"column":5,"line":11}}},{"id":"121","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":61,"line":19},"start":{"column":9,"line":19}}},{"id":"122","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":20},"start":{"column":9,"line":20}}},{"id":"123","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":61,"line":24},"start":{"column":9,"line":24}}},{"id":"124","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":25},"start":{"column":9,"line":25}}},{"id":"126","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":33},"start":{"column":9,"line":33}}},{"id":"128","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":22,"line":41},"start":{"column":9,"line":40}}},{"id":"129","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":19,"line":42},"start":{"column":9,"line":42}}},{"id":"131","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":50},"start":{"column":9,"line":50}}},{"id":"132","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":20,"line":51},"start":{"column":9,"line":51}}},{"id":"133","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":63},"start":{"column":18,"line":56}}},{"id":"115","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(3) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":2,"line":6},"start":{"column":28,"line":3}}},{"id":"117","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { id: 1, name: 'Martelo de Thor' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":2,"line":15},"start":{"column":29,"line":8}}},{"id":"120","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { name: 'Travesseiro de Pedra' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":2,"line":29},"start":{"column":37,"line":17}}},{"id":"127","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ { id: 1, name: 'Havaiana' } ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18"],"location":{"end":{"column":2,"line":46},"start":{"column":43,"line":38}}},{"id":"130","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 1","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":2,"line":54},"start":{"column":44,"line":48}}}],"source":"const connection = require('./connection');\n\nconst getAll = async () => {\n    const [products] = await connection.execute('SELECT * FROM StoreManager.products');\n    return products;\n};\n\nconst getID = async (id) => {\n    const [[productId]] = await connection.execute(\n    'SELECT * FROM StoreManager.products WHERE id = ?',\n    [id],\n    );\n\n    return productId;\n};\n\nconst postProduct = async (name) => {\n    await connection.execute(\n        'INSERT INTO StoreManager.products (name) VALUE (?)',\n        [name],    \n    );\n    \n    const [[product]] = await connection.execute(\n        'SELECT * FROM StoreManager.products WHERE name = ?',\n        [name],\n        );\n\n        return product;\n};\n\nconst allProductId = async () => {\n    const [[{ id }]] = await connection.execute(\n        'SELECT MAX(id) AS id FROM products',\n    );\n    return id;\n};\n\nconst updateProduct = async (id, name) => {\n   const [pid] = await connection.execute(\n        `UPDATE products SET name = ?\n        WHERE id = ?`,\n        [name, id],\n    );\n    \n    return pid;\n};\n\nconst deleteProduct = async (idProduct) => {\n    const [id] = await connection.execute(\n        'DELETE FROM StoreManager.products WHERE id = ?;',\n        [idProduct],\n    );\n    return id;\n};\n\nmodule.exports = {\n    getAll,\n    getID,\n    postProduct,\n    allProductId,\n    updateProduct,\n    deleteProduct,\n};"},"src/models/sales.model.js":{"language":"javascript","mutants":[{"id":"146","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":55},"start":{"column":30,"line":50}}},{"id":"148","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":64},"start":{"column":34,"line":57}}},{"id":"135","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":40,"line":13},"start":{"column":5,"line":5}}},{"id":"137","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":24,"line":23},"start":{"column":5,"line":19}}},{"id":"138","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":9,"line":24},"start":{"column":5,"line":24}}},{"id":"140","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":31},"start":{"column":9,"line":31}}},{"id":"141","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":32},"start":{"column":9,"line":32}}},{"id":"142","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":37},"start":{"column":9,"line":36}}},{"id":"143","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":38},"start":{"column":9,"line":38}}},{"id":"145","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":45},"start":{"column":9,"line":45}}},{"id":"147","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":52},"start":{"column":9,"line":52}}},{"id":"149","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":42,"line":59},"start":{"column":9,"line":59}}},{"id":"150","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":13,"line":60},"start":{"column":9,"line":60}}},{"id":"151","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":73},"start":{"column":18,"line":66}}},{"id":"134","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(3) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":2,"line":16},"start":{"column":28,"line":3}}},{"id":"136","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(1) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":2,"line":27},"start":{"column":29,"line":17}}},{"id":"139","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 34","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":41},"start":{"column":52,"line":29}}},{"id":"144","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 34","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23"],"location":{"end":{"column":2,"line":48},"start":{"column":34,"line":43}}}],"source":"const connection = require('./connection');\n\nconst getAll = async () => {\n    const [sales] = await connection.execute(\n    `SELECT \n    sp.sale_id AS saleId, \n    s.date, \n    sp.product_id AS productId, \n    sp.quantity \n    FROM StoreManager.sales_products AS sp \n    INNER JOIN StoreManager.sales AS s\n    ON sp.sale_id = s.id\n    ORDER BY sp.sale_id, sp.product_id`,\n    );\n    return sales;\n};\nconst getID = async (id) => {\n    const [salesId] = await connection.execute(\n    `SELECT s.date, sp.product_id AS productId, sp.quantity\n    FROM StoreManager.sales_products AS sp\n    INNER JOIN StoreManager.sales AS s\n    ON sp.sale_id = s.id\n    WHERE sale_id = ?;`,\n    [id],\n    );\n    return salesId;\n};\n\nconst postProductInSale = async (created, sale) => {\n    await connection.execute(\n        'INSERT INTO sales_products (sale_id, product_id, quantity) VALUES (?, ?, ?)',\n        [created, sale.productId, sale.quantity],\n    );\n\n    const [result] = await connection.execute(\n        `SELECT product_id AS productId, quantity\n        FROM sales_products WHERE sale_id = ?`,\n        [created],\n    );\n    return result;\n};\n\nconst createIdSale = async () => {\n    const [{ insertId }] = await connection.execute(\n        'INSERT INTO sales (date) VALUES (DEFAULT);',\n    );\n    return insertId;\n};\n\nconst salePost = async () => {\n    const [{ insertId }] = await connection.execute(\n        'INSERT INTO sales (date) VALUES (NOW())',\n    );\n        return insertId;\n};\n\nconst deleteSale = async (id) => {\n    const [sid] = await connection.execute(\n        'DELETE FROM sales WHERE id = ?;',\n        [id],\n      );\n    \n      return sid;\n};\n\nmodule.exports = {\n    getAll,\n    getID,\n    salePost,\n    createIdSale,\n    postProductInSale,\n    deleteSale,\n};"},"src/services/products.service.js":{"language":"javascript","mutants":[{"id":"174","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":26},"start":{"column":43,"line":20}}},{"id":"175","mutatorName":"BooleanLiteral","replacement":"productUpdt","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":23},"start":{"column":9,"line":23}}},{"id":"176","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":23},"start":{"column":9,"line":23}}},{"id":"177","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":23},"start":{"column":9,"line":23}}},{"id":"164","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":48,"line":5},"start":{"column":12,"line":5}}},{"id":"169","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":11},"start":{"column":25,"line":11}}},{"id":"170","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":11},"start":{"column":47,"line":11}}},{"id":"171","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":13},"start":{"column":12,"line":13}}},{"id":"173","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":51,"line":18},"start":{"column":12,"line":18}}},{"id":"178","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":23},"start":{"column":30,"line":23}}},{"id":"179","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":23},"start":{"column":52,"line":23}}},{"id":"180","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":36,"line":24},"start":{"column":17,"line":24}}},{"id":"181","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":48,"line":25},"start":{"column":12,"line":25}}},{"id":"186","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":30},"start":{"column":25,"line":30}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":30},"start":{"column":47,"line":30}}},{"id":"188","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":41,"line":34},"start":{"column":12,"line":34}}},{"id":"189","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":43},"start":{"column":18,"line":37}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26"],"location":{"end":{"column":2,"line":14},"start":{"column":36,"line":8}}},{"id":"163","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24"],"location":{"end":{"column":2,"line":6},"start":{"column":36,"line":3}}},{"id":"166","mutatorName":"BooleanLiteral","replacement":"idList","statusReason":"expected null to equal 404","status":"Killed","static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26"],"location":{"end":{"column":16,"line":11},"start":{"column":9,"line":11}}},{"id":"167","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Product not found' to deeply equal { Object (id, name) }","status":"Killed","static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26"],"location":{"end":{"column":16,"line":11},"start":{"column":9,"line":11}}},{"id":"168","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected null to equal 404","status":"Killed","static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26"],"location":{"end":{"column":16,"line":11},"start":{"column":9,"line":11}}},{"id":"182","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28","29"],"location":{"end":{"column":2,"line":35},"start":{"column":37,"line":28}}},{"id":"183","mutatorName":"BooleanLiteral","replacement":"search","statusReason":"expected 404 to equal null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28","29"],"location":{"end":{"column":16,"line":30},"start":{"column":9,"line":30}}},{"id":"184","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 404 to equal null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28","29"],"location":{"end":{"column":16,"line":30},"start":{"column":9,"line":30}}},{"id":"172","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27"],"location":{"end":{"column":2,"line":19},"start":{"column":37,"line":16}}},{"id":"185","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected null to equal 404","status":"Killed","static":false,"testsCompleted":2,"killedBy":["29"],"coveredBy":["28","29"],"location":{"end":{"column":16,"line":30},"start":{"column":9,"line":30}}}],"source":"const { productsModel } = require('../models');\n\nconst getAllProducts = async () => {\n    const allProducts = await productsModel.getAll();\n    return { type: null, message: allProducts };\n};\n\nconst getID = async (productId) => {\n    const idList = await productsModel.getID(productId);\n\n    if (!idList) return { type: 404, message: 'Product not found' };\n    \n    return { type: null, message: idList };\n};\n\nconst postProduct = async (name) => {\n    const postNewProduct = await productsModel.postProduct(name);\n    return { type: null, message: postNewProduct };\n};\nconst updateProduct = async (id, name) => {\n    await productsModel.updateProduct(id, name);\n    const productUpdt = await productsModel.getID(id);\n    if (!productUpdt) return { type: 404, message: 'Product not found' };\n    console.log('passei no service');\n    return { type: null, message: productUpdt };\n};\n\nconst deleteProduct = async (id) => {\n    const search = await productsModel.getID(id);\n    if (!search) return { type: 404, message: 'Product not found' };\n    \n    await productsModel.deleteProduct(id);\n    \n    return { type: null, message: null };\n};\n\nmodule.exports = {\ngetAllProducts,\ngetID,\npostProduct,\nupdateProduct,\ndeleteProduct,\n};"},"src/services/sales.service.js":{"language":"javascript","mutants":[{"id":"218","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":40},"start":{"column":34,"line":32}}},{"id":"219","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":35},"start":{"column":9,"line":35}}},{"id":"220","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":35},"start":{"column":9,"line":35}}},{"id":"221","mutatorName":"EqualityOperator","replacement":"idList.length !== 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":35},"start":{"column":9,"line":35}}},{"id":"191","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":48,"line":5},"start":{"column":12,"line":5}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":88,"line":11},"start":{"column":48,"line":11}}},{"id":"200","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":11},"start":{"column":70,"line":11}}},{"id":"201","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":13},"start":{"column":12,"line":13}}},{"id":"203","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":17},"start":{"column":32,"line":17}}},{"id":"205","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":19},"start":{"column":48,"line":19}}},{"id":"212","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":94,"line":21},"start":{"column":35,"line":21}}},{"id":"213","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":62,"line":21},"start":{"column":43,"line":21}}},{"id":"214","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":92,"line":21},"start":{"column":73,"line":21}}},{"id":"215","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":78,"line":25},"start":{"column":25,"line":25}}},{"id":"216","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":89,"line":27},"start":{"column":27,"line":27}}},{"id":"217","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":87,"line":27},"start":{"column":50,"line":27}}},{"id":"222","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":35},"start":{"column":37,"line":35}}},{"id":"223","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":35},"start":{"column":59,"line":35}}},{"id":"224","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":41,"line":39},"start":{"column":12,"line":39}}},{"id":"225","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":47},"start":{"column":18,"line":42}}},{"id":"190","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30"],"location":{"end":{"column":2,"line":6},"start":{"column":36,"line":3}}},{"id":"192","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":2,"line":14},"start":{"column":29,"line":8}}},{"id":"193","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Sale not found' to deeply equal { Object (date, productId, ...) }","status":"Killed","static":false,"testsCompleted":2,"killedBy":["32"],"coveredBy":["31","32"],"location":{"end":{"column":39,"line":11},"start":{"column":9,"line":11}}},{"id":"194","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected null to equal 404","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":39,"line":11},"start":{"column":9,"line":11}}},{"id":"196","mutatorName":"BooleanLiteral","replacement":"idList","statusReason":"Cannot read properties of undefined (reading 'length')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":16,"line":11},"start":{"column":9,"line":11}}},{"id":"195","mutatorName":"LogicalOperator","replacement":"!idList && idList.length === 0","statusReason":"Cannot read properties of undefined (reading 'length')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":39,"line":11},"start":{"column":9,"line":11}}},{"id":"197","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":39,"line":11},"start":{"column":20,"line":11}}},{"id":"198","mutatorName":"EqualityOperator","replacement":"idList.length !== 0","statusReason":"expected 'Sale not found' to deeply equal { Object (date, productId, ...) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32"],"location":{"end":{"column":39,"line":11},"start":{"column":20,"line":11}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":2,"line":30},"start":{"column":33,"line":16}}},{"id":"204","mutatorName":"MethodExpression","replacement":"getIdResult.some(id => id !== undefined)","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":73,"line":19},"start":{"column":30,"line":19}}},{"id":"206","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":72,"line":19},"start":{"column":56,"line":19}}},{"id":"208","mutatorName":"EqualityOperator","replacement":"id === undefined","statusReason":"expected 'product not found' to equal null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":72,"line":19},"start":{"column":56,"line":19}}},{"id":"207","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'product not found' to equal null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":72,"line":19},"start":{"column":56,"line":19}}},{"id":"209","mutatorName":"BooleanLiteral","replacement":"undefinedProduct","statusReason":"expected 'product not found' to equal null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":26,"line":21},"start":{"column":9,"line":21}}},{"id":"210","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'product not found' to equal null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":26,"line":21},"start":{"column":9,"line":21}}},{"id":"211","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":26,"line":21},"start":{"column":9,"line":21}}}],"source":"const { salesModel, productsModel } = require('../models');\n\nconst getAllProducts = async () => {\n    const allProducts = await salesModel.getAll();\n    return { type: null, message: allProducts };\n};\n\nconst getID = async (id) => {\n    const idList = await salesModel.getID(id);\n\n    if (!idList || idList.length === 0) return { type: 404, message: 'Sale not found' };\n    \n    return { type: null, message: idList };\n};\n\nconst getNewSale = async (s) => {\n    const getIdProduct = s.map((product) => productsModel.getID(product.productId));\n    const getIdResult = await Promise.all(getIdProduct);\n    const undefinedProduct = getIdResult.every((id) => id !== undefined);\n\n    if (!undefinedProduct) return { type: 'product not found', message: 'Product not found' };\n\n    const created = await salesModel.createIdSale();\n\n    const sales = s.map((sale) => salesModel.postProductInSale(created, sale));\n    const result = await Promise.all(sales);\n    const resultMessage = { type: null, message: { id: created, itemsSold: result[1] } };\n\n    return resultMessage;\n};\n\nconst deleteSale = async (id) => {\n    const idList = await salesModel.getID(id);\n    \n    if (idList.length === 0) return { type: 404, message: 'Sale not found' };\n    \n    await salesModel.deleteSale(id);\n    \n    return { type: null, message: null };\n};\n\nmodule.exports = {\ngetAllProducts,\ngetID,\ngetNewSale,\ndeleteSale,\n};"},"src/controllers/index.js":{"language":"javascript","mutants":[{"id":"0","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsController = require('./products.controller');\nconst salesController = require('./sales.controller');\n\nmodule.exports = {\n    productsController,\n    salesController,\n};"},"src/middlewares/schemas/sales.schema.js":{"language":"javascript","mutants":[{"id":"33","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":35,"line":3}}}],"source":"const Joi = require('joi');\n\nconst productsSchema = Joi.object({\n  productId: Joi.number().integer().positive().required(),\n  quantity: Joi.number().min(1).integer().positive()\n.required(),\n});\n\nconst salesSchema = Joi.array().items(productsSchema);\n\nmodule.exports = salesSchema;"},"src/middlewares/validateSalesError.js":{"language":"javascript","mutants":[{"id":"58","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":3},"start":{"column":33,"line":3}}},{"id":"66","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":6,"line":7},"start":{"column":37,"line":6}}},{"id":"67","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":6},"start":{"column":48,"line":6}}},{"id":"70","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":76,"line":14},"start":{"column":33,"line":14}}},{"id":"78","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":10,"line":17},"start":{"column":37,"line":16}}},{"id":"79","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":16},"start":{"column":48,"line":16}}},{"id":"81","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":60,"line":20},"start":{"column":39,"line":20}}},{"id":"90","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":10,"line":24},"start":{"column":37,"line":22}}},{"id":"91","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":65,"line":23},"start":{"column":18,"line":23}}},{"id":"92","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":32},"start":{"column":18,"line":29}}},{"id":"56","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":2,"line":10},"start":{"column":43,"line":1}}},{"id":"57","mutatorName":"MethodExpression","replacement":"sale.some(product => product.productId !== undefined)","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":78,"line":3},"start":{"column":22,"line":3}}},{"id":"59","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":77,"line":3},"start":{"column":46,"line":3}}},{"id":"60","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["12"],"location":{"end":{"column":77,"line":3},"start":{"column":46,"line":3}}},{"id":"61","mutatorName":"EqualityOperator","replacement":"product.productId === undefined","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["12"],"location":{"end":{"column":77,"line":3},"start":{"column":46,"line":3}}},{"id":"62","mutatorName":"BooleanLiteral","replacement":"products","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":18,"line":5},"start":{"column":9,"line":5}}},{"id":"63","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["12"],"location":{"end":{"column":18,"line":5},"start":{"column":9,"line":5}}},{"id":"64","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":18,"line":5},"start":{"column":9,"line":5}}},{"id":"65","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":2,"line":8},"start":{"column":20,"line":5}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":2,"line":27},"start":{"column":50,"line":12}}},{"id":"69","mutatorName":"MethodExpression","replacement":"sale.some(product => product.quantity !== undefined)","statusReason":"expected status to have been called with arguments 400\n\u001b[31m422\u001b[0m \u001b[32m400\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["14"],"coveredBy":["13","14"],"location":{"end":{"column":77,"line":14},"start":{"column":22,"line":14}}},{"id":"71","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 400\n\u001b[31m422\u001b[0m \u001b[32m400\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["14"],"coveredBy":["13","14"],"location":{"end":{"column":76,"line":14},"start":{"column":46,"line":14}}},{"id":"72","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":76,"line":14},"start":{"column":46,"line":14}}},{"id":"73","mutatorName":"EqualityOperator","replacement":"product.quantity === undefined","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":76,"line":14},"start":{"column":46,"line":14}}},{"id":"75","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":18,"line":15},"start":{"column":9,"line":15}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 400\n\u001b[31m422\u001b[0m \u001b[32m400\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["14"],"coveredBy":["13","14"],"location":{"end":{"column":18,"line":15},"start":{"column":9,"line":15}}},{"id":"74","mutatorName":"BooleanLiteral","replacement":"products","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":18,"line":15},"start":{"column":9,"line":15}}},{"id":"77","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected status to have been called with arguments 400\n\u001b[31m422\u001b[0m \u001b[32m400\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":6,"line":18},"start":{"column":20,"line":15}}},{"id":"82","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":60,"line":20},"start":{"column":46,"line":20}}},{"id":"80","mutatorName":"MethodExpression","replacement":"sale.some(q => q.quantity > 0)","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["13"],"location":{"end":{"column":61,"line":20},"start":{"column":28,"line":20}}},{"id":"83","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["13"],"location":{"end":{"column":60,"line":20},"start":{"column":46,"line":20}}},{"id":"84","mutatorName":"EqualityOperator","replacement":"q.quantity >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["13"],"location":{"end":{"column":60,"line":20},"start":{"column":46,"line":20}}},{"id":"85","mutatorName":"EqualityOperator","replacement":"q.quantity <= 0","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":60,"line":20},"start":{"column":46,"line":20}}},{"id":"87","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["13"],"location":{"end":{"column":28,"line":21},"start":{"column":9,"line":21}}},{"id":"86","mutatorName":"BooleanLiteral","replacement":"quantitySalesValue","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":28,"line":21},"start":{"column":9,"line":21}}},{"id":"88","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":28,"line":21},"start":{"column":9,"line":21}}},{"id":"89","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":6,"line":25},"start":{"column":30,"line":21}}}],"source":"const validateSales = (req, res, next) => {\n    const sale = req.body;\n    const products = sale.every((product) => product.productId !== undefined);\n\n    if (!products) {\n        return res.status(400).json({ message: '\"productId\" is required', \n    }); \n}\n    return next();\n};\n\nconst invalidQuantitySales = (req, res, next) => {\n    const sale = req.body;\n    const products = sale.every((product) => product.quantity !== undefined);\n    if (!products) {\n        return res.status(400).json({ message: '\"quantity\" is required', \n        }); \n    }\n        \nconst quantitySalesValue = sale.every((q) => q.quantity > 0);\n    if (!quantitySalesValue) {\n        return res.status(422).json({ \n        message: '\"quantity\" must be greater than or equal to 1',\n        }); \n    } \n    return next();\n};\n\nmodule.exports = {\n    validateSales,\n    invalidQuantitySales,\n  };\n"},"src/models/connection.js":{"language":"javascript","mutants":[{"id":"93","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":10},"start":{"column":37,"line":3}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":4},"start":{"column":11,"line":4}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":4},"start":{"column":11,"line":4}}},{"id":"96","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_HOSTNAME && 'db'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":4},"start":{"column":11,"line":4}}},{"id":"97","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":4},"start":{"column":41,"line":4}}},{"id":"98","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":43,"line":5},"start":{"column":11,"line":5}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":43,"line":5},"start":{"column":11,"line":5}}},{"id":"100","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_USER && 'root'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":43,"line":5},"start":{"column":11,"line":5}}},{"id":"101","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":5},"start":{"column":37,"line":5}}},{"id":"102","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":6},"start":{"column":15,"line":6}}},{"id":"103","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":6},"start":{"column":15,"line":6}}},{"id":"104","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_PASSWORD && 'password'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":6},"start":{"column":15,"line":6}}},{"id":"105","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":55,"line":6},"start":{"column":45,"line":6}}},{"id":"106","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":11,"line":7}}},{"id":"107","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":11,"line":7}}},{"id":"108","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_PORT && 3306","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":11,"line":7}}},{"id":"109","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":59,"line":8},"start":{"column":15,"line":8}}},{"id":"110","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":59,"line":8},"start":{"column":15,"line":8}}},{"id":"111","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_DATABASE && 'StoreManager'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":59,"line":8},"start":{"column":15,"line":8}}},{"id":"112","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":59,"line":8},"start":{"column":45,"line":8}}},{"id":"113","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":29,"line":9},"start":{"column":25,"line":9}}}],"source":"const mysql = require('mysql2/promise');\n\nconst connection = mysql.createPool({\n    host: process.env.MYSQL_HOSTNAME || 'db',\n    user: process.env.MYSQL_USER || 'root',\n    password: process.env.MYSQL_PASSWORD || 'password',\n    port: process.env.MYSQL_PORT || 3306,\n    database: process.env.MYSQL_DATABASE || 'StoreManager',\n    waitForConnections: true,\n});\n\nmodule.exports = connection;"},"src/models/index.js":{"language":"javascript","mutants":[{"id":"114","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsModel = require('./products.model');\nconst salesModel = require('./sales.model');\n\nmodule.exports = {\n    productsModel,\n    salesModel,\n};"},"src/routes/index.js":{"language":"javascript","mutants":[{"id":"152","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const routerProducts = require('./product.router');\nconst routeSales = require('./sales.route');\n\nmodule.exports = {\n    routerProducts,\n    routeSales,\n};"},"src/routes/product.router.js":{"language":"javascript","mutants":[{"id":"153","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":10},"start":{"column":12,"line":10}}},{"id":"154","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":11},"start":{"column":12,"line":11}}},{"id":"155","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":16,"line":12},"start":{"column":13,"line":12}}},{"id":"156","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":11,"line":14},"start":{"column":5,"line":14}}},{"id":"157","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":21,"line":19},"start":{"column":15,"line":19}}}],"source":"const { Router } = require('express');\nconst { productsController } = require('../controllers');\nconst { \n    validateFieldProduct,\n    invalidProductName,\n} = require('../middlewares/validateFieldProduct');\n\nconst router = Router();\n\nrouter.get('/', productsController.getAllProducts);\nrouter.get('/:id', productsController.getProductsByID);\nrouter.post('/', validateFieldProduct, productsController.postProduct);\nrouter.put(\n    '/:id',\n    validateFieldProduct,\n    invalidProductName,\n    productsController.updateProduct,\n);\nrouter.delete('/:id', productsController.deleteProduct);\n\nmodule.exports = router;\n"},"src/routes/sales.route.js":{"language":"javascript","mutants":[{"id":"158","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":7},"start":{"column":12,"line":7}}},{"id":"159","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":16,"line":8},"start":{"column":13,"line":8}}},{"id":"160","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":9},"start":{"column":12,"line":9}}},{"id":"161","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":21,"line":10},"start":{"column":15,"line":10}}}],"source":"const { Router } = require('express');\nconst { salesController } = require('../controllers');\nconst { validateSales, invalidQuantitySales } = require('../middlewares/validateSalesError');\n\nconst router = Router();\n\nrouter.get('/', salesController.getAllProducts);\nrouter.post('/', validateSales, invalidQuantitySales, salesController.getNewSale);\nrouter.get('/:id', salesController.getSalesByID);\nrouter.delete('/:id', salesController.deleteSale);\n\nmodule.exports = router;\n"},"src/services/index.js":{"language":"javascript","mutants":[{"id":"162","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsService = require('./products.service');\nconst salesService = require('./sales.service');\n\nmodule.exports = {\n    productsService,\n    salesService,\n};"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"tests/unit/controllers/products.controllers.test.js":{"tests":[{"id":"0","name":"TESTANDO O CONTROLLER PRODUTOS TESTANDO O CONTROLLER PRODUTOS Se ao digitar um id existente a aplicaçao continua"},{"id":"1","name":"TESTANDO O CONTROLLER PRODUTOS TESTANDO O CONTROLLER PRODUTOS Se ao digitar um id inexistente a aplicaçao quebra"},{"id":"2","name":"TESTANDO O CONTROLLER PRODUTOS TESTANDO O CONTROLLER PRODUTOS - área de listagem Se realiza corretamente a relação de todos os produtos"},{"id":"3","name":"TESTANDO O CONTROLLER PRODUTOS TESTANDO O CONTROLLER PRODUTOS - ENDPOINT POST Se realiza a entrega de informações do novo produto + status 201"},{"id":"4","name":"TESTANDO O CONTROLLER PRODUTOS TESTANDO O CONTROLLER PRODUTOS - ENDPOINT PUT Se atualiza um produto"}],"source":"const sinonChai = require('sinon-chai');\nconst sinon = require('sinon');\nconst chai = require('chai');\n\nchai.use(sinonChai);\nconst { expect } = chai;\nconst { productsService } = require('../../../src/services');\nconst { productsController } = require('../../../src/controllers');\nconst {\n    mockControllersNotFound,\n    mockControllersAllProducts,\n    newProduct,\n} = require('./mocks/products.controllers.mock');\n\ndescribe('TESTANDO O CONTROLLER PRODUTOS', function () {\n    describe('TESTANDO O CONTROLLER PRODUTOS', function () {\n        it('Se ao digitar um id existente a aplicaçao continua', async function () {\n            const response = {};\n            const request = { params: { id: 1 } };\n    \n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n    \n            sinon.stub(productsService, 'getID').resolves({\n                type: null, message: mockControllersAllProducts[0],\n            });\n    \n            await productsController.getProductsByID(request, response);\n    \n            expect(response.status).to.have.been.calledWith(200);\n            expect(response.json).to.have.been.calledWith({ id: 1, name: 'Martelo de Thor' });\n        });\n    \n        it('Se ao digitar um id inexistente a aplicaçao quebra', async function () {\n            const response = {};\n            const request = { params: { id: 348957 } };\n    \n            sinon.stub(productsService, 'getID').resolves(mockControllersNotFound);\n    \n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n    \n            await productsController.getProductsByID(request, response);\n    \n            expect(response.status).to.have.been.calledWith(404);\n            expect(response.json).to.have.been.calledWith({ message: 'Product not found' });\n        });\n    });\n\n    describe('TESTANDO O CONTROLLER PRODUTOS - área de listagem', function () {\n        it('Se realiza corretamente a relação de todos os produtos', async function () {\n            const response = {};\n            const request = {};\n            sinon.stub(productsService, 'getAllProducts')\n                .resolves({ type: null, message: mockControllersAllProducts });\n\n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n\n            await productsController.getAllProducts(request, response);\n\n            expect(response.status).to.have.been.calledWith(200);\n            expect(response.json).to.have.been.calledWith(mockControllersAllProducts);\n        });\n    });\n\n    describe('TESTANDO O CONTROLLER PRODUTOS - ENDPOINT POST', function () {\n        it('Se realiza a entrega de informações do novo produto + status 201', async function () {\n            const response = {};\n            const request = { body: { name: 'Travesseiro de Pedra' } };\n            sinon.stub(productsService, 'postProduct')\n                .resolves({ type: null, message: newProduct });\n\n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n\n            await productsController.postProduct(request, response);\n\n            expect(response.status).to.have.been.calledWith(201);\n            expect(response.json).to.have.been.calledWith(newProduct);\n        });\n    });\n\n    describe('TESTANDO O CONTROLLER PRODUTOS - ENDPOINT PUT', function () {\n        it('Se atualiza um produto', async function () {\n            const response = {};\n            const request = { params: { id: 1 },\n                body: {\n                    name: 'Nintendo Switch',\n                },\n            };\n\n            sinon.stub(productsService, 'updateProduct')\n            .resolves({ type: null,\n                message: {\n                id: 1,\n                name: 'Havaiana',\n                },\n            });\n    \n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n            \n            await productsController.updateProduct(request, response);\n    \n            expect(response.status).to.have.been.calledWith(200);\n            expect(response.json).to.have.been.calledWith({\n                id: 1,\n                name: 'Havaiana',\n            });\n        });\n    });\n\n    afterEach(function () {\n        sinon.restore();\n    });\n});\n"},"tests/unit/controllers/sales.controllers.test.js":{"tests":[{"id":"5","name":"TESTANDO O CONTROLLER SALES TESTANDO O CONTROLLER SALES Se ao digitar um id existente a aplicaçao continua"},{"id":"6","name":"TESTANDO O CONTROLLER SALES TESTANDO O CONTROLLER SALES Se ao digitar um id inexistente a aplicaçao quebra"},{"id":"7","name":"TESTANDO O CONTROLLER SALES TESTANDO O CONTROLLER SALLES - área de listagem Se realiza corretamente a relação de todos os produtos"},{"id":"8","name":"TESTANDO O CONTROLLER SALES TESTANDO O CONTROLLER SALES - ENDPOINT POST Se retorna coretamente quando um id é válido"}],"source":"const sinonChai = require('sinon-chai');\nconst sinon = require('sinon');\nconst chai = require('chai');\n\nchai.use(sinonChai);\nconst { expect } = chai;\nconst { salesService } = require('../../../src/services');\nconst { salesController } = require('../../../src/controllers');\nconst {\n    mockControllersNotFound,\n    mockControllersAllSales,\n    mockFoundSalesId,\n    mockSalesCreated,\n    mockSaleCreated201,\n} = require('./mocks/sales.controllers.mock');\n\ndescribe('TESTANDO O CONTROLLER SALES', function () {\n    describe('TESTANDO O CONTROLLER SALES', function () {\n        it('Se ao digitar um id existente a aplicaçao continua', async function () {\n            const response = {};\n            const request = { params: { id: 1 } };\n    \n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n    \n            sinon.stub(salesService, 'getID').resolves({\n                type: null, message: mockFoundSalesId[2],\n            });\n    \n            await salesController.getSalesByID(request, response);\n    \n            expect(response.status).to.have.been.calledWith(200);\n            expect(response.json).to.have.been.calledWith({ \n                date: '2023-05-27T12:13:53.000Z',\n                productId: 3,\n                quantity: 15,\n            });\n        });\n    \n        it('Se ao digitar um id inexistente a aplicaçao quebra', async function () {\n            const response = {};\n            const request = { params: { id: 348957 } };\n    \n            sinon.stub(salesService, 'getID').resolves(mockControllersNotFound);\n    \n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n    \n            await salesController.getSalesByID(request, response);\n    \n            expect(response.status).to.have.been.calledWith(404);\n            expect(response.json).to.have.been.calledWith({ message: 'Sale not found' });\n        });\n    });\n\n    describe('TESTANDO O CONTROLLER SALLES - área de listagem', function () {\n        it('Se realiza corretamente a relação de todos os produtos', async function () {\n            const response = {};\n            const request = {};\n            sinon.stub(salesService, 'getAllProducts')\n                .resolves({ type: null, message: mockControllersAllSales });\n\n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n\n            await salesController.getAllProducts(request, response);\n\n            expect(response.status).to.have.been.calledWith(200);\n            expect(response.json).to.have.been.calledWith(mockControllersAllSales);\n        });\n    });\n\n    describe('TESTANDO O CONTROLLER SALES - ENDPOINT POST', function () {\n        it('Se retorna coretamente quando um id é válido', async function () {\n            const response = { status: sinon.stub().returnsThis(), json: sinon.stub().returns() };\n            const request = { body: mockSalesCreated };\n            \n            sinon.stub(salesService, 'getNewSale')\n                .resolves({ type: null, message: mockSaleCreated201 });\n\n            await salesController.getNewSale(request, response);\n\n            expect(response.status).to.have.been.calledWith(201);\n            expect(response.json).to.have.been.calledWith(mockSaleCreated201);\n        });\n    });\n\n    // describe('TESTANDO O CONTROLLER SALES - ENDPOINT DELETE', function () {\n    //     it('Apaga uma venda', async function () {\n    //       const response = {};\n    //       const request = { params: { id: 1 } };\n    //       sinon.stub(salesService, 'deleteSale')\n    //       .resolves({ type: null, message: null });\n    \n    //       response.status = sinon.stub().returns(response);\n    //       response.json = sinon.stub().returns();\n    \n    //       await salesController.deleteSale(request, response);\n    \n    //       expect(response.status).to.have.been.calledWith(204);\n    //       expect(response.json).to.have.been.calledWith();\n    //     });\n    // });\n\n    afterEach(function () {\n        sinon.restore();\n    });\n});\n"},"tests/unit/middlewares/validateFieldProduct.test.js":{"tests":[{"id":"9","name":"TESTANDO O MIDDLEWARE validateFieldProduct Deve retornar um erro caso \"name\" nao seja adicionado"},{"id":"10","name":"TESTANDO O MIDDLEWARE validateFieldProduct Deve retornar um erro caso \"name\" seja menor que 5 letras"},{"id":"11","name":"TESTANDO O MIDDLEWARE validateFieldProduct Se ao digitar um id inexistente a aplicaçao quebra"}],"source":"const sinon = require('sinon');\nconst chai = require('chai');\nconst sinonChai = require('sinon-chai');\nconst { \n    validateFieldProduct,\n    // invalidProductName,\n} = require('../../../src/middlewares/validateFieldProduct');\nconst { productsService } = require('../../../src/services'); \nconst { productsController } = require('../../../src/controllers');\n\nconst { expect } = chai;\nchai.use(sinonChai);\n\ndescribe('TESTANDO O MIDDLEWARE validateFieldProduct', function () {\n    it('Deve retornar um erro caso \"name\" nao seja adicionado', async function () {\n        const request = { body: { undefined } };\n        const response = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n        const next = sinon.stub().returns();\n\n        validateFieldProduct(request, response, next);\n    \n        expect(response.status).to.have.been.calledWith(400);\n        expect(response.json).to.have.been.calledWith({ message: '\"name\" is required' });\n    });\n\n    it('Deve retornar um erro caso \"name\" seja menor que 5 letras', async function () {\n        const request = { body: { name: 'aa' } };\n        const response = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n        const next = sinon.stub().returns();\n\n        validateFieldProduct(request, response, next);    \n    \n        expect(response.status).to.have.been.calledWith(422);\n        expect(response.json).to.have.been.calledWith({ \n            message: '\"name\" length must be at least 5 characters long', \n        });\n    });\n    \n        // it('Retornar mensagem erro, status 404 se nao existir id ao atualizar', async function () {\n        //  const res = {};\n        //  const req = { params: { id: 125674785786534 } };\n        //  const next = sinon.stub().returns();\n   \n        //  res.status = sinon.stub().returns(res);\n        //  res.json = sinon.stub().returns();\n   \n        //  invalidProductName(req, res, next);\n   \n        // expect(res.status).to.have.been.calledWith(404);\n        // expect(res.json).to.have.been.calledWith({\n        //   message: 'Product not found',\n        // });\n\n        it('Se ao digitar um id inexistente a aplicaçao quebra', async function () {\n            const response = {};\n            const request = { params: { id: 348957 }, \n            body: { name: 'Patrick Estrela' } };\n            // const next = sinon.stub().returns();\n            \n            response.status = sinon.stub().returns(response);\n            response.json = sinon.stub().returns();\n           \n            sinon.stub(productsService, 'updateProduct')\n            .resolves({ type: 404, message: 'Product not found' });\n            \n            await productsController.updateProduct(request, response);\n    \n            expect(response.status).to.have.been.calledWith(404);\n            expect(response.json).to.have.been.calledWith({ message: 'Product not found' });\n        });\n    \n    afterEach(function () {\n        sinon.restore();\n    });\n});\n"},"tests/unit/middlewares/validateSalesError.test.js":{"tests":[{"id":"12","name":"TESTANDO O MIDDLEWARE - validateSalesError Dados inválidos enviados Deve retornar: \"productId\" is required além do status 400"},{"id":"13","name":"TESTANDO O MIDDLEWARE - validateSalesError Dados inválidos enviados Deve retornar mensagem 'Quantity must be greater than or equal to 1'\n       além do status 422"},{"id":"14","name":"TESTANDO O MIDDLEWARE - validateSalesError Dados inválidos enviados Deve retornar mensagem '\"quantity\" is required'\n       além do status 400"}],"source":"const sinon = require('sinon');\nconst chai = require('chai');\nconst sinonChai = require('sinon-chai');\nconst {\n    validateSales,\n    invalidQuantitySales,\n  } = require('../../../src/middlewares/validateSalesError');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\ndescribe('TESTANDO O MIDDLEWARE - validateSalesError', function () {\n    describe('Dados inválidos enviados', function () {\n      it('Deve retornar: \"productId\" is required além do status 400', async function () {\n       const res = {};\n       const req = { body: [\n        {\n          quantity: 1,\n        },\n        {\n          productId: 2,\n          quantity: 5,\n        },\n      ] };\n       const next = sinon.stub().returns();\n  \n       res.status = sinon.stub().returns(res);\n       res.json = sinon.stub().returns();\n  \n       validateSales(req, res, next);\n  \n      expect(res.status).to.have.been.calledWith(400);\n      expect(res.json).to.have.been.calledWith({\n        message: '\"productId\" is required',\n      });\n      });\n  \n      it(`Deve retornar mensagem 'Quantity must be greater than or equal to 1'\n       além do status 422`, async function () {\n        const res = {};\n        const req = { body: [\n          {\n            productId: 1,\n            quantity: 0,\n          },\n          {\n            productId: 2,\n            quantity: -3,\n          },\n        ] };\n        const next = sinon.stub().returns();\n  \n        res.status = sinon.stub().returns(res);\n        res.json = sinon.stub().returns();\n  \n        invalidQuantitySales(req, res, next);\n  \n       expect(res.status).to.have.been.calledWith(422);\n       expect(res.json).to.have.been.calledWith({\n         message: '\"quantity\" must be greater than or equal to 1',\n       });\n       });\n  \n       it(`Deve retornar mensagem '\"quantity\" is required'\n       além do status 400`, async function () {\n        const res = {};\n        const req = { body: [\n          {\n            productId: 2,\n            quantity: 3,\n          },\n          {\n            productId: 2,\n          },\n        ] };\n        const next = sinon.stub().returns();\n  \n        res.status = sinon.stub().returns(res);\n        res.json = sinon.stub().returns();\n  \n        invalidQuantitySales(req, res, next);\n  \n       expect(res.status).to.have.been.calledWith(400);\n       expect(res.json).to.have.been.calledWith({\n         message: '\"quantity\" is required',\n       });\n       });\n    });\n  \n    afterEach(function () {\n      sinon.restore();\n    });\n  });"},"tests/unit/models/products.model.test.js":{"tests":[{"id":"15","name":"TESTANDO O MODEL PRODUTOS MODEL PRODUTOS/GET Se todos os produtos são listados"},{"id":"16","name":"TESTANDO O MODEL PRODUTOS MODEL PRODUTOS/GET Se o id digitado corresponde a pessoa certa"},{"id":"17","name":"TESTANDO O MODEL PRODUTOS MODEL PRODUTOS/POST Se um produto é cadastrado corretamente"},{"id":"18","name":"TESTANDO O MODEL PRODUTOS MODEL PRODUTOS/PUT Se um produto é atualizado corretamente"},{"id":"19","name":"TESTANDO O MODEL PRODUTOS MODEL PRODUTOS/DELETE Se um produto é deletado corretamente"}],"source":"const { expect } = require('chai');\nconst sinon = require('sinon');\nconst connection = require('../../../src/models/connection');\nconst { \n    mockAllProducts, \n    newProduct, \n    updateProduct, \n    input, \n} = require('./mocks/products.model.mock');\nconst { productsModel } = require('../../../src/models');\n\ndescribe('TESTANDO O MODEL PRODUTOS', function () {\n    describe('MODEL PRODUTOS/GET', function () {\n        it('Se todos os produtos são listados', async function () {\n            sinon.stub(connection, 'execute').resolves([mockAllProducts]);\n            const result = await productsModel.getAll();\n            expect(result).to.be.deep.equal(mockAllProducts);\n        });\n\n        it('Se o id digitado corresponde a pessoa certa', async function () {\n            sinon.stub(connection, 'execute').resolves([[mockAllProducts[0]]]);\n            const result = await productsModel.getID(1);\n            expect(result).to.be.deep.equal(mockAllProducts[0]);\n        });\n    });\n\n    describe('MODEL PRODUTOS/POST', function () {\n        it('Se um produto é cadastrado corretamente', async function () {\n            sinon.stub(connection, 'execute').resolves([[newProduct]]);\n            const result = await productsModel.postProduct({ name: 'Travesseiro de Pedra' });\n            expect(result).to.be.deep.equal(newProduct);\n        });\n    });\n\n    describe('MODEL PRODUTOS/PUT', function () {\n        it('Se um produto é atualizado corretamente', async function () {\n            sinon.stub(connection, 'execute').resolves([updateProduct]);\n            const result = await productsModel.updateProduct(input);\n            expect(result).to.be.deep.equal(updateProduct);\n        });\n    });\n\n    describe('MODEL PRODUTOS/DELETE', function () {\n        it('Se um produto é deletado corretamente', async function () {\n            sinon.stub(connection, 'execute').resolves([1]);\n            const result = await productsModel.deleteProduct(1);\n            expect(result).to.equal(1);\n        });\n    });\n\n    afterEach(function () {\n        sinon.restore();\n    });\n});"},"tests/unit/models/sales.model.test.js":{"tests":[{"id":"20","name":"TESTANDO O MODEL SALES Se todos os produtos são listados"},{"id":"21","name":"TESTANDO O MODEL SALES Se o id digitado corresponde a venda certa"},{"id":"22","name":"TESTANDO O MODEL SALES MODEL SALES - POST MODEL Cadastrando uma venda"},{"id":"23","name":"TESTANDO O MODEL SALES MODEL SALES - POST MODEL Se possui ID"}],"source":"const { expect } = require('chai');\nconst sinon = require('sinon');\nconst connection = require('../../../src/models/connection');\nconst { \n    mockAllSales, \n    mockSalesId, \n    mockSalesCreated,\n} = require('./mocks/sales.model.mock');\nconst { salesModel } = require('../../../src/models');\n\ndescribe('TESTANDO O MODEL SALES', function () {\n    it('Se todos os produtos são listados', async function () {\n        sinon.stub(connection, 'execute').resolves([mockAllSales]);\n        const result = await salesModel.getAll();\n        expect(result).to.be.deep.equal(mockAllSales);\n    });\n\n    it('Se o id digitado corresponde a venda certa', async function () {\n        sinon.stub(connection, 'execute').resolves([[mockSalesId]]);\n        const result = await salesModel.getID(1);\n        expect(result).to.be.deep.equal([mockSalesId]);\n    });    \n\n    describe('MODEL SALES - POST MODEL', function () {\n        it('Cadastrando uma venda', async function () {\n            sinon.stub(connection, 'execute').resolves([34]);\n      \n            const result = await salesModel.postProductInSale(34, mockSalesCreated);\n      \n            expect(result).to.equal(34);\n          });\n\n        it('Se possui ID', async function () {\n          sinon.stub(connection, 'execute').resolves([{ insertId: 34 }]);\n    \n          const result = await salesModel.createIdSale();\n    \n          expect(result).to.equal(34);\n        });\n      });\n\n    afterEach(function () {\n        sinon.restore();\n    });\n}); "},"tests/unit/services/products.services.test.js":{"tests":[{"id":"24","name":"TESTANDO O SERVICE PRODUTOS TESTANDO O SERVICE PRODUTOS - LISTAGEM todos os produtos são listados"},{"id":"25","name":"TESTANDO O SERVICE PRODUTOS TESTANDO O SERVICE PRODUTOS - PRODUTO ESPECÍFICO Se nao existir"},{"id":"26","name":"TESTANDO O SERVICE PRODUTOS TESTANDO O SERVICE PRODUTOS - PRODUTO ESPECÍFICO Se o id digitado corresponde ao produto correto"},{"id":"27","name":"TESTANDO O SERVICE PRODUTOS TESTANDO O SERVICE PRODUTOS - ENDPOINT POST Se a validação do produto é feita de forma correta"},{"id":"28","name":"TESTANDO O SERVICE PRODUTOS TESTANDO O SERVICE PRODUTOS - ENDPOINT DELETE A exclusão do produto é feita de forma correta dada as informações"},{"id":"29","name":"TESTANDO O SERVICE PRODUTOS TESTANDO O SERVICE PRODUTOS - ENDPOINT DELETE Sem infos enviadas"}],"source":"const { expect } = require('chai');\nconst sinon = require('sinon');\nconst { productsService } = require('../../../src/services');\nconst { productsModel } = require('../../../src/models');\nconst {\n    mockServiceAllProducts,\n    mockServiceProductByEspecificId,\n    newProduct,\n} = require('./mocks/products.services.mock');\n\ndescribe('TESTANDO O SERVICE PRODUTOS', function () {\n    describe('TESTANDO O SERVICE PRODUTOS - LISTAGEM', function () {\n        it('todos os produtos são listados', async function () {\n            sinon.stub(productsModel, 'getAll').resolves(mockServiceAllProducts);\n            const result = await productsService.getAllProducts();\n            expect(result.type).to.be.equal(null);\n            expect(result.message).to.be.deep.equal(mockServiceAllProducts);\n        });\n    });\n\n    describe('TESTANDO O SERVICE PRODUTOS - PRODUTO ESPECÍFICO', function () {\n        it('Se nao existir', async function () {\n            sinon.stub(productsModel, 'getID').resolves(undefined);\n            const result = await productsService.getID(45333);\n            expect(result.type).to.be.equal(404);\n            expect(result.message).to.be.equal('Product not found');\n        });\n    \n        it('Se o id digitado corresponde ao produto correto', async function () {\n            sinon.stub(productsModel, 'getID').resolves(mockServiceProductByEspecificId);\n            const result = await productsService.getID(3);\n            expect(result.message).to.be.deep.equal(mockServiceProductByEspecificId);\n        });\n    });\n\n    describe('TESTANDO O SERVICE PRODUTOS - ENDPOINT POST', function () {\n        it('Se a validação do produto é feita de forma correta', async function () {\n            sinon.stub(productsModel, 'postProduct').resolves(newProduct);\n            const result = await productsService.postProduct({ name: 'Travesseiro de Pedra' });\n            expect(result.type).to.be.equal(null);\n            expect(result.message).to.be.equal(newProduct);\n        });\n    });\n\n    describe('TESTANDO O SERVICE PRODUTOS - ENDPOINT DELETE', function () {\n        it('A exclusão do produto é feita de forma correta dada as informações', async function () {\n            sinon.stub(productsModel, 'getID').resolves({ id: 2, name: 'Martelo de Thor' });\n            sinon.stub(productsModel, 'deleteProduct').resolves();\n            const result = await productsService.deleteProduct(1);\n            expect(result.type).to.equal(null);\n            expect(result.message).to.deep.equal(null);\n        });\n\n        it('Sem infos enviadas', async function () {\n            sinon.stub(productsModel, 'getID').resolves(undefined);\n            sinon.stub(productsModel, 'deleteProduct').resolves();\n            const result = await productsService.deleteProduct(undefined);\n            expect(result.type).to.equal(404);\n            expect(result.message).to.be.deep.equal('Product not found');\n        });\n    });\n\n    afterEach(function () {\n        sinon.restore();\n    });\n}); "},"tests/unit/services/sales.services.test.js":{"tests":[{"id":"30","name":"TESTANDO O SERVICE SALES TESTANDO O SERVICE PRODUTOS - LISTAGEM todos os produtos são listados"},{"id":"31","name":"TESTANDO O SERVICE SALES TESTANDO O SERVICE SALES - PRODUTO ESPECÍFICO Se nao existir"},{"id":"32","name":"TESTANDO O SERVICE SALES TESTANDO O SERVICE SALES - PRODUTO ESPECÍFICO Se o id digitado corresponde ao produto correto"},{"id":"33","name":"TESTANDO O SERVICE SALES TESTANDO O SERVICE SALES - ENDPOINT POST Se cria uma venda"}],"source":"const { expect } = require('chai');\nconst sinon = require('sinon');\nconst { salesService } = require('../../../src/services');\nconst { salesModel, productsModel } = require('../../../src/models');\nconst {\n    mockServiceAllSales,\n    mockServiceSalesByEspecificId,\n    mockSalesCreated,\n    mockSaleCreated201,\n} = require('./mocks/sales.services.mock');\n\ndescribe('TESTANDO O SERVICE SALES', function () {\n    describe('TESTANDO O SERVICE PRODUTOS - LISTAGEM', function () {\n        it('todos os produtos são listados', async function () {\n            sinon.stub(salesModel, 'getAll').resolves(mockServiceAllSales);\n            const result = await salesService.getAllProducts();\n            expect(result.type).to.be.equal(null);\n            expect(result.message).to.be.deep.equal(mockServiceAllSales);\n        });\n    });\n\n    describe('TESTANDO O SERVICE SALES - PRODUTO ESPECÍFICO', function () {\n        it('Se nao existir', async function () {\n            sinon.stub(salesModel, 'getID').resolves(undefined);\n            const result = await salesService.getID(45333);\n            expect(result.type).to.be.equal(404);\n            expect(result.message).to.be.equal('Sale not found');\n        });\n    \n        it('Se o id digitado corresponde ao produto correto', async function () {\n            sinon.stub(salesModel, 'getID').resolves(mockServiceSalesByEspecificId);\n            const result = await salesService.getID(2);\n            expect(result.message).to.be.deep.equal(mockServiceSalesByEspecificId);\n        });\n    });\n\n    describe('TESTANDO O SERVICE SALES - ENDPOINT POST', function () {\n        it('Se cria uma venda', async function () {\n            sinon.stub(productsModel, 'getID').resolves(1);\n            sinon.stub(salesModel, 'createIdSale').resolves(3);\n            sinon.stub(salesModel, 'postProductInSale').resolves(mockSalesCreated);\n\n            const result = await salesService.getNewSale(mockSalesCreated);\n\n            expect(result.type).to.equal(null);\n            expect(result.message).to.deep.equal(mockSaleCreated201);\n        });\n    });\n    \n    // describe('TESTANDO O SERVICE SALES - ENDPOINT DELETE', function () {\n    //     it('Se deleta uma venda com infos corretas', async function () {\n    //         sinon.stub(salesModel, 'getID').resolves([\n    //             {\n    //               date: '2023-05-30T18:43:03.000Z',\n    //               productId: 1,\n    //               quantity: 5,\n    //             },\n    //             {\n    //               date: '2023-05-30T18:43:03.000Z',\n    //               productId: 2,\n    //               quantity: 10,\n    //             },\n    //           ]);\n    //         sinon.stub(salesModel, 'deleteSale').resolves();\n\n    //         const result = await salesService.deleteSale(1);\n\n    //         expect(result.type).to.equal(null);\n    //         expect(result.message).to.deep.equal(null);\n    //     });\n\n    //     it('Não se consegue deletar uma venda sem informações', async function () {\n    //         sinon.stub(salesModel, 'getID').resolves([]);\n    //         sinon.stub(salesModel, 'deleteSale').resolves();\n      \n    //         const result = await salesService.deleteSale(undefined);\n      \n    //         expect(result.type).to.equal(404);\n    //         expect(result.message).to.deep.equal('Sale not found');\n    //       });\n    // });\n    afterEach(function () {\n        sinon.restore();\n    });\n}); "}},"projectRoot":"/Volumes/Sem Título 1/Documentos/Trybe/projetos/sd-028-b-store-manager/backend","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","reporters":["html","clear-text","json","progress"],"mutate":["src/**/*.js","!src/{app,server}.js"],"mutator":{"excludedMutations":["StringLiteral","ObjectLiteral","ArrayDeclaration","ArrowFunction"],"plugins":null},"testRunner":"mocha","coverageAnalysis":"perTest","ignoreStatic":true,"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"mochaOptions":{}},"framework":{"name":"StrykerJS","version":"6.4.2","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"6.4.2","mocha":"10.2.0"}}}